//
//  CatalogPresenter.swift
//
//  Created by Filip Gulan on 01/02/2019.
//  Copyright (c) 2019 Infinum. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import RxSwift
import RxCocoa

final class CatalogPresenter {

    // MARK: - Private properties -

    private unowned let view: CatalogViewInterface
    private let wireframe: CatalogWireframeInterface
    private let disposeBag = DisposeBag()
    private let dataSource: CatalogDataSource

    // MARK: - Lifecycle -

    init(view: CatalogViewInterface, wireframe: CatalogWireframeInterface, dataSource: CatalogDataSource = .init()) {
        self.view = view
        self.wireframe = wireframe
        self.dataSource = dataSource
    }
}

// MARK: - Extensions -

extension CatalogPresenter: CatalogPresenterInterface {
    
    func sections() -> [TableSectionItem] {
        let didSelectRelay = PublishRelay<CatalogItem>()
        handle(didSelect: didSelectRelay)

        return createSections(didSelect: didSelectRelay)
    }
    
}

private extension CatalogPresenter {

    func createSections(didSelect: PublishRelay<CatalogItem>) -> [TableSectionItem] {
        return dataSource
            .sections
            .map { $0.toCatalogSectionItem(didSelect: didSelect) }
    }

    func handle(didSelect: PublishRelay<CatalogItem>) {
        didSelect
            .subscribe(onNext: { [unowned wireframe] in
                wireframe.show($0.model)
            })
            .disposed(by: disposeBag)
    }
}

extension CatalogSectionModel {

    func toCatalogSectionItem(didSelect: PublishRelay<CatalogItem>) -> CatalogSection {
        let cellItems = items
            .map { CatalogItem(model: $0, didSelect: didSelect) }

        return CatalogSection(title: title, items: cellItems)
    }
}
