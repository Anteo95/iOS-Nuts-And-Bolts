//
//  NetworkingJapxInteractor.swift
//  Catalog
//
//  Created by Mate Masnov on 02/12/2019.
//  Copyright (c) 2019 Infinum. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import Alamofire
import Japx

final class NetworkingJapxInteractor {
    
    private let service: APIServiceable
    private let sessionManager: SessionManager
    
    init(service: APIServiceable = APIService.instance, sessionManager: SessionManager = .default) {
        self.service = service
        self.sessionManager = sessionManager
    }
}

// MARK: - Extensions -

extension NetworkingJapxInteractor: NetworkingJapxInteractorInterface {
    
    func createUser(email: String, username: String, password: String, passwordConfirmation: String, completion: @escaping (Result<PokedexUser>) -> Void) -> DataRequest {
        let router = PokedexRouter
            .createUser(
                email: email,
                username: username,
                password: password,
                passwordConfirmation: passwordConfirmation
        )
        
        return service
            .requestJSONAPI(
                PokedexUser.self,
                keyPath: "data",
                router: router,
                sessionManager: sessionManager,
                completion: completion
        )
        
    }
    
    func getUser(id: String, completion: @escaping (Result<PokedexUser>) -> Void) -> DataRequest {
        let router = PokedexRouter.getUser(id: id)
        
        return service
            .requestJSONAPI(
                PokedexUser.self,
                keyPath: "data",
                router: router,
                sessionManager: sessionManager,
                completion: completion
        )
        
    }
    
    func updateUser(id: String, email: String?, username: String?, completion: @escaping (Result<PokedexUser>) -> Void) -> DataRequest {
        let router = PokedexRouter.updateUser(id: id, email: email, username: username)
        
        return service
            .requestJSONAPI(
                PokedexUser.self,
                keyPath: "data",
                router: router,
                sessionManager: sessionManager,
                completion: completion
        )
        
    }
    
    func deleteUser(id: String, completion: @escaping (Result<Void>) -> Void) -> DataRequest {
        let router = PokedexRouter.deleteUser(id: id)
        
        return service
            .requestCompletion(
                router: router,
                sessionManager: sessionManager,
                completion: completion
        )
    }
    
    func setAdapter(_ adapter: PokedexTokenAdapter) {
        sessionManager.adapter = adapter
    }
}
