//
//  NetworkingJapxPresenter.swift
//  Catalog
//
//  Created by Mate Masnov on 02/12/2019.
//  Copyright (c) 2019 Infinum. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class NetworkingJapxPresenter {

    // MARK: - Private properties -

    private unowned let view: NetworkingJapxViewInterface
    private let wireframe: NetworkingJapxWireframeInterface
    private let interactor: NetworkingJapxInteractorInterface

    private var user: PokedexUser?
    private var authToken: String?
    
    // MARK: - Lifecycle -

    init(wireframe: NetworkingJapxWireframeInterface, view: NetworkingJapxViewInterface, interactor: NetworkingJapxInteractorInterface) {
        self.wireframe = wireframe
        self.view = view
        self.interactor = interactor
    }
}

// MARK: - Extensions -

extension NetworkingJapxPresenter: NetworkingJapxPresenterInterface {
    
    func didPressCreate(with email: String?, username: String?, password: String?) {
        guard let email = email, let username = username, let password = password else {
            wireframe.showFailure(with: "Error", message: "Invalid credentials!")
            return
        }
        
        view.showLoading()
        
        interactor
            .createUser(
                email: email,
                username: username,
                password: password,
                passwordConfirmation: password
            ) { [weak wireframe, weak interactor, weak view, weak self] result in
                    switch result {
                    case .success(let user):
                        view?.hideLoading()
                        guard let authToken = user.authToken, let self = self else { return }
                        
                        self.authToken = authToken
                        let adapter = PokedexTokenAdapter(authToken: authToken, email: email)
                        interactor?.setAdapter(adapter)
                        
                        self.user = user
                        
                        view?.updateView(with: .userExists)
                        wireframe?.displayInfoAlert(with: "Success", message: "Created user with id: \(user.id)")
                    case .failure:
                        view?.hideLoading()
                        wireframe?.showFailure(with: "Error", message: "Create failed!")
                    }
            }
    }
    
    func didPressGet() {
        guard let userId = user?.id else {
            wireframe.showFailure(with: "Error", message: "Couldn't find user")
            return
        }
        
        view.showLoading()
        interactor
            .getUser(id: userId) { [weak wireframe, weak view] result in
                switch result {
                case .success:
                    view?.hideLoading()
                    wireframe?.displayInfoAlert(with: "Success", message: "Got user with id: \(userId)")
                case .failure:
                    view?.hideLoading()
                    wireframe?.showFailure(with: "Error", message: "Couldn't find user")
                }
            }
    }
    
    func didPressUpdate(email: String?, username: String?) {
        guard let userId = user?.id else {
            wireframe.showFailure(with: "Error", message: "Couldn't find user")
            return
        }
        
        let authToken = authToken
        
        view.showLoading()
        interactor
            .updateUser(
                id: userId,
                email: email,
                username: username
            ) { [weak self, weak wireframe, weak interactor, weak view] result in
                switch result {
                case .success(let responseUser):
                    view?.hideLoading()
                    guard let authToken = authToken, let email = responseUser.email else { return }
                    
                    self?.user = responseUser
                    let adapter = PokedexTokenAdapter(authToken: authToken, email: email)
                    interactor?.setAdapter(adapter)
                    
                    wireframe?.displayInfoAlert(with: "Success", message: "Updated user with id: \(userId)")
                case .failure:
                    view?.hideLoading()
                    wireframe?.showFailure(with: "Error", message: "Update failed!")
                }
            }
    }

    func didPressDelete() {
        guard let userId = user?.id else {
            wireframe.showFailure(with: "Error", message: "User already deleted!")
            return
        }

        view.showLoading()
        interactor
            .deleteUser(id: userId) { [weak wireframe, weak self, weak view] result in
                switch result {
                case .success:
                    view?.hideLoading()
                    self?.user = nil
                    
                    view?.updateView(with: .userDoesNotExist)
                    wireframe?.displayInfoAlert(with: "Success", message: "Deleted user with id: \(userId)")
                case .failure:
                    view?.hideLoading()
                    wireframe?.showFailure(with: "Error", message: "Delete failed!")
                }
            }
    }
    
}
