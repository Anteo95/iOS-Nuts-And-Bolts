//
//  NetworkingJapxPresenter.swift
//  Catalog
//
//  Created by Mate Masnov on 02/12/2019.
//  Copyright (c) 2019 Infinum. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class NetworkingJapxPresenter {

    // MARK: - Private properties -

    private unowned let _view: NetworkingJapxViewInterface
    private let _wireframe: NetworkingJapxWireframeInterface
    private let _interactor: NetworkingJapxInteractorInterface

    private var _user: PokedexUser?
    private var _authToken: String?
    
    // MARK: - Lifecycle -

    init(wireframe: NetworkingJapxWireframeInterface, view: NetworkingJapxViewInterface, interactor: NetworkingJapxInteractorInterface) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
    }
}

// MARK: - Extensions -

extension NetworkingJapxPresenter: NetworkingJapxPresenterInterface {
    
    func didPressCreate(with email: String?, username: String?, password: String?) {
        guard let email = email, let username = username, let password = password else {
            _wireframe.showFailure(with: "Error", message: "Invalid credentials!")
            return
        }
        
        _view.showLoading()
        
        _interactor
            .createUser(
                email: email,
                username: username,
                password: password,
                passwordConfirmation: password
            ) { [unowned _wireframe, unowned _interactor, unowned _view, weak self] (result) in
                    switch result {
                    case .success(let user):
                        _view.hideLoading()
                        guard let authToken = user.authToken, let self = self else { return }
                        
                        self._authToken = authToken
                        let adapter = PokedexTokenAdapter(authToken: authToken, email: email)
                        _interactor.setAdapter(adapter)
                        
                        self._user = user
                        
                        _view.updateView(with: .UserExists)
                        _wireframe.displayInfoAlert(with: "Success", message: "Created user with id: \(user.id)")
                    case .failure:
                        _view.hideLoading()
                        _wireframe.showFailure(with: "Error", message: "Create failed!")
                    }
        }
    }
    
    func didPressGet() {
        guard let userId = _user?.id else {
            _wireframe.showFailure(with: "Error", message: "Couldn't find user")
            return
        }
        
        _view.showLoading()
        _interactor
            .getUser(id: userId) { [unowned _wireframe, unowned _view] (result) in
                switch result {
                case .success:
                    _view.hideLoading()
                    _wireframe.displayInfoAlert(with: "Success", message: "Got user with id: \(userId)")
                case .failure:
                    _view.hideLoading()
                    _wireframe.showFailure(with: "Error", message: "Couldn't find user")
                }
        }
    }
    
    func didPressUpdate(email: String?, username: String?) {
        guard let userId = _user?.id else {
            _wireframe.showFailure(with: "Error", message: "Couldn't find user")
            return
        }
        
        _view.showLoading()
        _interactor
            .updateUser(
                id: userId,
                email: email,
                username: username
            ) { [weak self, unowned _wireframe, unowned _interactor, unowned _view] (result) in
                switch result {
                case .success(let responseUser):
                    _view.hideLoading()
                    guard let self = self, let authToken = self._authToken, let email = responseUser.email else { return }
                    
                    self._user = responseUser
                    let adapter = PokedexTokenAdapter(authToken: authToken, email: email)
                    _interactor.setAdapter(adapter)
                    
                    _wireframe.displayInfoAlert(with: "Success", message: "Updated user with id: \(userId)")
                case .failure:
                    _view.hideLoading()
                    _wireframe.showFailure(with: "Error", message: "Update failed!")
                }
        }
    }

    func didPressDelete() {
        guard let userId = _user?.id else {
            _wireframe.showFailure(with: "Error", message: "User already deleted!")
            return
        }

        _view.showLoading()
        _interactor
            .deleteUser(id: userId) { [unowned _wireframe, weak self, unowned _view] (result) in
                switch result {
                case .success:
                    _view.hideLoading()
                    self?._user = nil
                    
                    _view.updateView(with: .UserDoesNotExist)
                    _wireframe.displayInfoAlert(with: "Success", message: "Deleted user with id: \(userId)")
                case .failure:
                    _view.hideLoading()
                    _wireframe.showFailure(with: "Error", message: "Delete failed!")
                }
        }
    }
    
}
