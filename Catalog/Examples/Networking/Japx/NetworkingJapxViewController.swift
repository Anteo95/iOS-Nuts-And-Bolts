//
//  NetworkingJapxViewController.swift
//  Catalog
//
//  Created by Mate Masnov on 02/12/2019.
//  Copyright (c) 2019 Infinum. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class NetworkingJapxViewController: UIViewController {

    // MARK: - Public properties -
    
    var presenter: NetworkingJapxPresenterInterface!
    
    // MARK: - Private properties -
    
    @IBOutlet private weak var emailTextField: UITextField!
    @IBOutlet private weak var usernameTextField: UITextField!
    @IBOutlet private weak var passwordTextField: UITextField!
    
    @IBOutlet private weak var createUserButton: UIButton!
    @IBOutlet private weak var getUserButton: UIButton!
    @IBOutlet private weak var updateUserButton: UIButton!
    @IBOutlet private weak var deleteUserButton: UIButton!
    
    @IBOutlet private weak var scrollView: UIScrollView!
    @IBOutlet private weak var bottomConstraint: NSLayoutConstraint!
    
    private let bottomHeight: CGFloat = 20
    
    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        
        updateView(with: .userDoesNotExist)
    }
	
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        startObservingKeyboardEvents()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        stopObservingKeyboardEvents()
    }
    
}

// MARK: - Extensions -

extension NetworkingJapxViewController: NetworkingJapxViewInterface {
    
    func updateView(with state: NetworkingJapx.State) {
        createUserButton.setEnabledModifyingAlpha(state == .userDoesNotExist)
        getUserButton.setEnabledModifyingAlpha(state == .userExists)
        updateUserButton.setEnabledModifyingAlpha(state == .userExists)
        deleteUserButton.setEnabledModifyingAlpha(state == .userExists)
    }

}

extension NetworkingJapxViewController: Catalogizable {
    
    static var title: String {
        return "Japx Networking"
    }
    
    static var viewController: UIViewController {
        return NetworkingJapxWireframe().viewController
    }
    
}

private extension UIButton {
    
    func setEnabledModifyingAlpha(_ shouldEnable: Bool) {
        self.isEnabled = shouldEnable
        self.alpha = shouldEnable ? 1 : 0.3
    }
    
}

// MARK: - IBActions -

private extension NetworkingJapxViewController {
    
    @IBAction func createUserActionHandler(_ sender: Any) {
        presenter.didPressCreate(with: emailTextField.text, username: usernameTextField.text, password: passwordTextField.text)
    }
    
    @IBAction func getUserActionHandler(_ sender: Any) {
        presenter.didPressGet()
    }
    
    @IBAction func updateUserActionHandler(_ sender: Any) {
        presenter.didPressUpdate(email: emailTextField.text, username: usernameTextField.text)
    }
    
    @IBAction func deleteUserActionHandler(_ sender: Any) {
        presenter.didPressDelete()
    }
    
}

// MARK: - Keyboard notifications -

private extension NetworkingJapxViewController {
    
    func startObservingKeyboardEvents() {
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(keyboardWillChangeFrame(notification:)),
            name: UIResponder.keyboardWillChangeFrameNotification,
            object: nil
        )
    }
    
    func stopObservingKeyboardEvents() {
        NotificationCenter.default.removeObserver(
            self,
            name: UIResponder.keyboardWillChangeFrameNotification,
            object: nil
        )
    }

    @objc
    func keyboardWillChangeFrame(notification: NSNotification) {
        guard let userInfo = notification.userInfo else { return }
        guard let keyboardSize = userInfo[UIResponder.keyboardFrameEndUserInfoKey] as? CGRect else { return }
        
        let keyboardHeight = keyboardSize.origin.y < view.frame.size.height ? keyboardSize.height : 0
        bottomConstraint.constant = keyboardHeight + bottomHeight
        
        UIView.animate(withDuration: 0.3, animations: {
            self.view.layoutIfNeeded()
        })
    }
    
}
